@import 'variables';
@import 'functions';

/*
** @desc Gera classes helpers de todos os tipos
*/
@mixin generate-helpers($helpers: $helpers) {
    @each $key, $helper in $helpers {
        $values: map-get($helper, values);

        @if type-of($values)=='string' or type-of(nth($values, 1)) !='list' {
            $values: zip($values, $values);
        }

        @each $key, $value in $values {
            $properties: map-get($helper, property);

            $property-class: if(map-has-key($helper, customclass), map-get($helper, customclass), map-get($helper, class));
            $property-class-modifier: if(map-has-key($helper, customclass), '', if($property-class =='', '', '-') + $key);

            .#{$property-class + $property-class-modifier} {
                @each $property in $properties {
                    #{$property}: $value !important; // stylelint-disable-line declaration-no-important
                }
            }
        }
    }
}

/*
  ** @desc Cria breakpoints para design responsivo
  ** @param
  **  $size: Propriedade do tamanho de tela (xs/sm/md/lg)
  **  $breakpoints: Variável padrão breakpoints
  ** 
  */

@mixin media-breakpoint($size, $breakpoints: $breakpoints) {
    $min: breakpoint-min($size, $breakpoints);
    $max: breakpoint-max($size, $breakpoints);

    @if $min and $max {
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }

    @else if $min {
        @media (min-width: $min) {
            @content;
        }
    }

    @else if $max {
        @media (max-width: $max) {
            @content;
        }
    }
}

/*
** @desc: Trunca texto, precisa do display inline ou block para funcionar
*/
@mixin ellipsis() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}